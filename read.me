The cohesion and coupling of Elevator, which is the obtained with a responsibility-driven approach, is more optimum. So clients are simplified. Dependencies are kept to a minimum. This makes code maintenance easier.

The reason for the existence of objects is their behaivor. Data is where behaivor is there. Encapsulation combines behaivor and data to fulfill responsibilities.

Data exchange should be minimal as in this solution. Getter-setter approach or data-driven approach increase the data exchange.